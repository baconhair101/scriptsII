local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
   Name = "script for Who",
   LoadingTitle = "wait a sec",
   LoadingSubtitle = "by dev",
   ConfigurationSaving = {
      Enabled = false,
      FolderName = nil, -- Create a custom folder for your hub/game
      FileName = "Big Hub"
   },
   Discord = {
      Enabled = false,
      Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ABCD would be ABCD
      RememberJoins = true -- Set this to false to make them join the discord every time they load it up
   },
   KeySystem = false, -- Set this to true to use our key system
   KeySettings = {
      Title = "Untitled",
      Subtitle = "Key System",
      Note = "No method of obtaining the key is provided",
      FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
      SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = {"Hello"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
   }
})

local MainTab = Window:CreateTab("Main", nil) -- Title, Image

local LocalPlayerSection = MainTab:CreateSection("LocalPlayer")

Rayfield:Notify({
   Title = "yay!!",
   Content = "the gui loaded!",
   Duration = 3,
   Image = nil,
   Actions = { -- Notification Buttons
      Ignore = {
         Name = "Okay",
         Callback = function()
      end
   },
},
})

local ClickTP = MainTab:CreateToggle({
   Name = "ClickTP",
   CurrentValue = false,
   Flag = "ClickTPToggle", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
   -- The function that takes place when the toggle is pressed
   -- The variable (Value) is a boolean on whether the toggle is true or false
        loadstring(game:HttpGet("https://raw.githubusercontent.com/baconhair101/scripts/main/wearedevsnet%20edited%20clicktp"))()
   Rayfield:Notify({
   Title = "Click TP",
   Content = "Toggled Click TP (CTRL + Click)",
   Duration = 3,
   Image = nil,
   Actions = { -- Notification Buttons
      Ignore = {
         Name = "Okay",
         Callback = function()
      end
   },
},
})
   end,
})

local InfJump = MainTab:CreateToggle({
   Name = "Infinite Jump",
   CurrentValue = false,
   Flag = "InfJumpToggle", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
   -- The function that takes place when the toggle is pressed
   -- The variable (Value) is a boolean on whether the toggle is true or false
        loadstring(game:HttpGet("https://raw.githubusercontent.com/baconhair101/scripts/main/wearedevsnet%20edited%20inf%20jump"))()
   Rayfield:Notify({
   Title = "Infinite Jump",
   Content = "Toggled Infinte Jump",
   Duration = 3,
   Image = nil,
   Actions = { -- Notification Buttons
      Ignore = {
         Name = "Okay",
         Callback = function()
      end
   },
},
})
   end,
})

local NoClip = MainTab:CreateToggle({
   Name = "Noclip",
   CurrentValue = false,
   Flag = "NoclipToggle", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
   -- The function that takes place when the toggle is pressed
   -- The variable (Value) is a boolean on whether the toggle is true or false
   loadstring(game:HttpGet("https://raw.githubusercontent.com/baconhair101/scripts/main/noclip%20script"))()
   Rayfield:Notify({
   Title = "Noclip",
   Content = "Toggled Noclip",
   Duration = 3,
   Image = nil,
   Actions = { -- Notification Buttons
      Ignore = {
         Name = "Okay",
         Callback = function()
      end
   },
},
})
   end,
})

local Fly = MainTab:CreateButton({
   Name = "Fly",
   Callback = function()
   -- The function that takes place when the button is pressed
            loadstring(game:HttpGet("https://raw.githubusercontent.com/baconhair101/scripts/main/random%20fly%20script"))()
   Rayfield:Notify({
   Title = "Fly",
   Content = "Toggled Fly",
   Duration = 3,
   Image = nil,
   Actions = { -- Notification Buttons
      Ignore = {
         Name = "Okay",
         Callback = function()
      end
   },
   },
})
   end,
})

local Slider = MainTab:CreateSlider({
   Name = "WalkSpeed",
   Range = {16, 1000},
   Increment = 1,
   Suffix = "change your walkspeed",
   CurrentValue = 16,
   Flag = "WalkSpeedSlider", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
   -- The function that takes place when the slider changes
   -- The variable (Value) is a number which correlates to the value the slider is currently at
   game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = Value
   end,
})

local Slider = MainTab:CreateSlider({
   Name = "JumpPower",
   Range = {50, 500},
   Increment = 1,
   Suffix = "change your jumppower",
   CurrentValue = 50,
   Flag = "JumpPowerSlider", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
   -- The function that takes place when the slider changes
   -- The variable (Value) is a number which correlates to the value the slider is currently at
   game.Players.LocalPlayer.Character.Humanoid.JumpPower = Value
   end,
})


local TCOTab = Window:CreateTab("The Chosen One", nil) -- Title, Image

local MainSection = TCOTab:CreateSection("Main")

local Button = TCOTab:CreateButton({
   Name = "Enlighten",
   Callback = function()
   -- The function that takes place when the button is pressed
   
local Plr = game.Players.LocalPlayer
local Chr = Plr.Character or Plr.CharacterAdded:Wait()

local enlighten = game.Workspace:FindFirstChild("The Arkenstone")

        if enlighten then
            local previousPos = Chr.HumanoidRootPart.CFrame
            Chr.HumanoidRootPart.CFrame = enlighten.Handle.CFrame
            task.wait(0.05)
            Chr.HumanoidRootPart.CFrame = previousPos
        end
   
      Rayfield:Notify({
   Title = "Enlighten",
   Content = "If enlighten was found you have been given it.",
   Duration = 3,
   Image = nil,
   Actions = { -- Notification Buttons
      Ignore = {
         Name = "Okay",
         Callback = function()
      end
   },
   },
})
   end,
})
